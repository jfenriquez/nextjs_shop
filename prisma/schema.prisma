// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum sizes {
  XS
  S
  M
  L
  XL
  XXL
}

enum gender {
  men
  women
  unisex
  kid
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String
  role          Role         @default(USER)
  image         String?
  address       UserAddress? ////relacion de uno a uno
  createdAt     DateTime     @default(now())
  Order         Order[]
}

////tablas
model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[] ////relacion de uno a muchos
}

model Product {
  id          String   @id @default(cuid())
  title       String   @unique
  description String?
  inStock     Int      @default(0)
  price       Int      @default(0)
  sizes       sizes[]  @default([])
  gender      gender?  @default(unisex)
  tags        String[] @default([])
  slug        String   @unique

  Category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String
  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  @@index([gender])
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Country {
  id           String         @id @default(cuid())
  name         String         @unique
  code         String         @unique
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(cuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  /////relaciones
  country   Country? @relation(fields: [countryId], references: [code])
  countryId String?

  /////uno a uno
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

/////order-orderitem
model Order {
  id           String    @id @default(cuid())
  isPaid       Boolean   @default(false)
  paidAt       DateTime?
  itemsInOrder Int
  total        Float     @default(0)
  tax          Float     @default(0)
  subTotal     Float     @default(0)

  /////relaciones
  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orderItems    OrderItem[]
  OrderAddress  OrderAddress?
  transactionId String?
}

model OrderItem {
  id       String @id @default(cuid())
  size     sizes
  quantity Int    @default(1)
  price    Float  @default(0)

  /////relaciones order 
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  ////relaciones product
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String   @id @default(cuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String
  createdAt  DateTime @default(now())

  /////relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique

  country   Country? @relation(fields: [countryId], references: [code])
  countryId String?
}
